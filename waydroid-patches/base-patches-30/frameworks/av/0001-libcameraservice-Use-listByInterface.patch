From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Erfan Abdi <erfangplus@gmail.com>
Date: Thu, 20 May 2021 22:35:53 +0430
Subject: [PATCH] libcameraservice: Use listByInterface

---
 .../common/CameraProviderManager.cpp            | 17 +++++++++++++----
 1 file changed, 13 insertions(+), 4 deletions(-)

diff --git a/services/camera/libcameraservice/common/CameraProviderManager.cpp b/services/camera/libcameraservice/common/CameraProviderManager.cpp
index 230abb79b4..17d7a3e5ee 100644
--- a/services/camera/libcameraservice/common/CameraProviderManager.cpp
+++ b/services/camera/libcameraservice/common/CameraProviderManager.cpp
@@ -29,7 +29,7 @@
 #include <future>
 #include <inttypes.h>
 #include <hardware/camera_common.h>
-#include <android/hidl/manager/1.2/IServiceManager.h>
+#include <android/hidl/manager/1.1/IServiceManager.h>
 #include <hidl/ServiceManagement.h>
 #include <functional>
 #include <camera_metadata_hidden.h>
@@ -66,13 +66,22 @@ CameraProviderManager::~CameraProviderManager() {
 hardware::hidl_vec<hardware::hidl_string>
 CameraProviderManager::HardwareServiceInteractionProxy::listServices() {
     hardware::hidl_vec<hardware::hidl_string> ret;
-    auto manager = hardware::defaultServiceManager1_2();
-    if (manager != nullptr) {
-        manager->listManifestByInterface(provider::V2_4::ICameraProvider::descriptor,
+    auto manager = hardware::defaultServiceManager1_1();
+    auto manager_host = hardware::defaultServiceManager1_1(true);
+    if (manager_host != nullptr) {
+        manager_host->listByInterface(provider::V2_4::ICameraProvider::descriptor,
                 [&ret](const hardware::hidl_vec<hardware::hidl_string> &registered) {
                     ret = registered;
                 });
     }
+    if (ret.size() == 0) {
+        if (manager != nullptr) {
+            manager->listByInterface(provider::V2_4::ICameraProvider::descriptor,
+                    [&ret](const hardware::hidl_vec<hardware::hidl_string> &registered) {
+                        ret = registered;
+                    });
+        }
+    }
     return ret;
 }
 
